#!/usr/bin/env python
# vim: ft=python

import argparse
import logging
import grp
import os
import pwd
import socket
import subprocess


SUPPORTED_HOSTNAME_PREFIXES = ["bld-linux64", "try-linux64"]

SHARE_BASE_DIR = '/builds/hg-shared'
FIREFOX_REPO = 'https://hg.mozilla.org/mozilla-unified'
FIREFOX_SHA1 = '8ba995b74e18334ab3707f27e9eb8f4e37ba3d29'


log = logging.getLogger(__name__)


def is_suported_slave(hostname):
    return any(hostname.startswith(prefix) for prefix in
               SUPPORTED_HOSTNAME_PREFIXES)


def clone_firefox():
    """Clone the Firefox repo to the hg-shared directory."""
    dest_dir = os.path.join(SHARE_BASE_DIR, FIREFOX_SHA1)
    if os.path.exists(dest_dir):
        log.info('%s already exists; skipping' % dest_dir)
        return

    # hg.mozilla.org automatically serves a clone bundle URL appropriate
    # for the client's IP. So just `hg clone` to get the data.
    log.info('creating %s' % dest_dir)
    args = [
        'hg',
        # Prefer a streaming clone bundle because they are the fastest
        # to download and preserve optimal encoding from server.
        '--config', 'ui.clonebundleprefers=VERSION=packed1',
        'clone',
        '--noupdate',
        FIREFOX_REPO,
        dest_dir,
    ]
    return subprocess.call(args)


def run_as(user, group):
    current_id = os.getuid()
    current_gid = os.getgid()
    target_uid = pwd.getpwnam(user).pw_uid
    target_gid = grp.getgrnam(group).gr_gid
    # Set GID before dropping to UID
    if target_gid != current_gid:
        log.info("Switching group to %s", group)
        os.setgid(target_gid)

    if target_uid != current_id:
        log.info("Switching user to %s", user)
        os.setuid(target_uid)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-u", "--user",
        default="<%= scope.lookupvar('::config::builder_username') %>",
        help="Run the script under user ID")
    parser.add_argument("-g", "--group", default="mock_mozilla",
                        help="Run the script under group ID")
    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(message)s")

    # Drop privileges
    run_as(args.user, args.group)

    hostname = socket.gethostname().split(".")[0]
    log.info("Working on %s", hostname)

    if not is_suported_slave(hostname):
        log.warn("%s is not supported", hostname)
        exit(0)

    # The Firefox repo is the only one large enough to warrant
    # seeding.
    clone_firefox()


if __name__ == "__main__":
    try:
        main()
    except Exception:
        log.exception("Failed to seed repo, gracefully exiting...")
        exit(0)
