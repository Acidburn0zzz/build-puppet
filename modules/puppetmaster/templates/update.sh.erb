#! /bin/bash

# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/. 

errormailto="<%= scope.lookupvar('::config::puppet_notif_email') %>"
changemailto="<%= scope.lookupvar('::config::puppet_notif_email') %>"
repo="<%= scope.lookupvar('::config::puppet_again_repo') %>"
branch="<%= scope.lookupvar('::config::puppet_again_branch') %>"
repodir="/etc/puppet/production"
hg="/usr/local/bin/hg"
git="/usr/bin/git"

hostname=<%= scope.lookupvar('::fqdn') %>
cd $repodir

output=""
if [ -e ".hg" ]; then
    # check for uncommitted changes
    output=`$hg stat`
elif [ -e ".git" ]; then
    output=`$git status -s`
fi

if [ -n "$output" ]; then
    (
        echo "Uncommitted local changes to $hostname:$repodir!"
        echo ''
        echo $output
    ) | mail -s "[PuppetAgain Errors] Uncommitted local changes in $hostname:$repodir" $errormailto
    exit 1
fi

try_update() {
    if [ -e ".hg" ]; then
        rev_before=`$hg ident -i`
        rev_current=`$hg ident -i $repo -r $branch`
        if [ $? -ne 0 ] || [ -z "$rev_current" ]; then
            return 1
        fi

        if [ $rev_before == $rev_current ]; then
            # nothing to do
            return 0
        fi

        # update (and pass on the exit status)
        # (hg pull can't do -u and -r at the same time)
        $hg pull $repo && $hg up -r $branch
    elif [ -e ".git" ]; then
        $git fetch origin
        rev_before=`$git rev-parse HEAD`
        rev_current=`$git rev-parse "origin/$branch"`
        if [ -z "$rev_current" ]; then
            return 1
        fi

        if [ $rev_before == $rev_current ]; then
            # nothing to do
            return 0
        fi

        # update (and pass on the exit status)
        $git checkout "origin/$branch"
    else
        return 1
    fi
}

# retry that five times
LOGFILE=$(mktemp)
ok=false
for try in {1..5}; do
    if try_update >> $LOGFILE 2>&1; then
        ok=true
        break
    else
        # don't sleep too long, or we'll overlap the next crontask
        sleep 1
    fi
    echo '' >> $LOGFILE
done

if ! $ok; then
    (
        echo "Errors pulling from vcs for puppet on $hostname:"
        echo ''
        cat $LOGFILE
    ) | mail -s "[PuppetAgain Errors] Errors pulling from vcs for puppet on $hostname" $errormailto
else
    # get a new rev, in case something landed during this run
    rev_after=""
    if [ -e ".hg" ]; then
        rev_after=`$hg ident -i`
    elif [ -e ".git" ]; then
        rev_after=`$git rev-parse HEAD`
    fi
    if [ $rev_before != $rev_after ]; then
        (
            echo "Puppet changes applied at $hostname:"
            echo ''
            if [ -e ".hg" ]; then
                $hg diff -r $rev_before -r $rev_after
            elif [ -e ".git" ]; then
                $git diff -r $rev_before -r $rev_after
            fi
        ) | mail -s "[PuppetAgain Changes] Puppet changes applied at $hostname" $changemailto

        # reload httpd, to flush puppet's caches
        /sbin/service httpd reload >/dev/null 2>&1
    fi
fi

rm -f $LOGFILE
